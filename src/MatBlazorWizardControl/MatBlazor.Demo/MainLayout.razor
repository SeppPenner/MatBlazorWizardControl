@inherits LayoutComponentBase

<MatAppBar Style="z-index: 100;" Class="mat">
    <MatAppBarRow>
        <MatAppBarSection>
            <MatIconButton Icon="menu" OnClick="@((e) => MenuButtonClicked())"></MatIconButton>
            <MatAppBarTitle>MatBlazor - Material Design components for Blazor and Razor Components</MatAppBarTitle>
        </MatAppBarSection>
        <MatAppBarSection Align="@MatAppBarSectionAlign.End">
            <MatIconButton @ref="themeButton" Icon="invert_colors" OnClick="@((e) => OnClick(e))">
            </MatIconButton>
        </MatAppBarSection>
    </MatAppBarRow>
</MatAppBar>

<MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="mat">

    <MatHidden Breakpoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Up" HiddenChanged="@ModelDrawerHiddenChanged">
        <ChildContent>
            <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Modal">
                <MatAppBarAdjust></MatAppBarAdjust>
            </MatDrawer>
        </ChildContent>
        <ElseContent>
            <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Dismissible">
                <MatAppBarAdjust></MatAppBarAdjust>
            </MatDrawer>
        </ElseContent>
    </MatHidden>

    <MatDrawerContent Style="padding-left: 25px; padding-right: 25px;">
        <MatAppBarAdjust></MatAppBarAdjust>
        @Body
    </MatDrawerContent>

</MatDrawerContainer>

@code {

    [NotNull]
    BaseMatIconButton? themeButton;

    [NotNull]
    BaseMatMenu? Menu;

    [CascadingParameter]
    MatTheme? theme { get; set; }

    public string ThemePrimary
    {
        get => theme.Primary;
        set
        {
            theme.Primary = value;
            theme.ThemeHasChanged();
        }
    }

    protected void ModelDrawerHiddenChanged(bool hidden)
    {
        if (!hidden)
        {
            _navMenuOpened = false;
        }
    }

    public void OnClick(MouseEventArgs e)
    {
        this.Menu.OpenAsync(themeButton.Ref);
    }

    bool lazySnackbarIsOpen;

    bool _navMenuOpened = true;

    void MenuButtonClicked()
    {
        _navMenuOpened = !_navMenuOpened;
        this.StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Task.Delay(TimeSpan.FromSeconds(5)).ContinueWith((_) => { this.lazySnackbarIsOpen = true; });
    }

}